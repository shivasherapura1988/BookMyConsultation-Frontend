{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shiva\\\\Downloads\\\\BookMyConsultationUIF\\\\BookMyConsultationUI\\\\src\\\\screens\\\\doctorList\\\\BookAppointment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Paper, CardHeader, CardContent, TextField, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookAppointment = ({\n  baseUrl,\n  doctor,\n  getUserAppointments,\n  userAppointments,\n  closeModalHandler\n}) => {\n  _s();\n\n  let doctorName = `${doctor.firstName} ${doctor.lastName}`;\n\n  const dateFormatter = date => {\n    let dateArray = date.toLocaleDateString().split(\"/\");\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\n    return newDate;\n  };\n\n  const currentUserAppoinments = userAppointments;\n  const [selectedDate, setSelectedDate] = useState(dateFormatter(new Date()));\n  const [selectedSlot, setSelectedSlot] = useState(\"\");\n  const [availableSlots, setAvailableSlots] = useState([\"None\"]);\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [slotRequiredClass, setSlotRequiredClass] = useState(\"none\");\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\n\n  const handleDateChange = date => {\n    setSelectedDate(dateFormatter(date));\n  };\n\n  const handleSlotChange = e => {\n    setSelectedSlot(e.target.value);\n    setSlotRequiredClass(\"none\");\n  };\n\n  const getAvailableSlots = async () => {\n    const url = `${baseUrl}doctors/${doctor.id}/timeSlots?date=${selectedDate}`;\n\n    try {\n      const rawResponse = await fetch(url);\n\n      if (rawResponse.ok) {\n        const response = await rawResponse.json();\n        setAvailableSlots(response.timeSlot);\n      } else {\n        const error = new Error();\n        error.message = \"Some Error Occurred\";\n        throw error;\n      }\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const bookAppointmentHandler = async e => {\n    if (e) e.preventDefault(); // Validation\n\n    if (selectedSlot === \"None\" || selectedSlot === null || selectedSlot === \"\") {\n      setSlotRequiredClass(\"block\");\n      return;\n    }\n\n    const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\n    const userDetails = JSON.parse(sessionStorage.getItem(\"user-details\"));\n    const accessToken = sessionStorage.getItem(\"accessToken\"); // Allow only logged in user to Book appointment\n\n    if (emailId == null || userDetails == null || accessToken == null) {\n      alert(\"Please Login to Book an appointment\");\n      closeModalHandler();\n      return;\n    } // Check if user already has appointment for the same date-time\n\n\n    const existingBooking = currentUserAppoinments.filter(appt => {\n      if (appt.appointmentDate === selectedDate && appt.timeSlot === selectedSlot) {\n        return appt;\n      }\n\n      return null;\n    });\n\n    if (existingBooking.length > 0) {\n      alert(\"Either the slot is already booked or not available\");\n      return;\n    }\n\n    let data = {\n      doctorId: doctor.id,\n      doctorName: doctorName,\n      userId: emailId,\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\n      timeSlot: selectedSlot,\n      createdDate: dateFormatter(new Date()),\n      appointmentDate: selectedDate,\n      symptoms: symptoms,\n      priorMedicalHistory: medicalHistory\n    };\n    const url = baseUrl + \"appointments\";\n\n    try {\n      const rawResponse = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json;charset=UTF-8\",\n          Authorization: `Bearer ${accessToken}`\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (rawResponse.ok) {\n        setBookedSuccessfully(true);\n        getUserAppointments();\n        setTimeout(function () {\n          closeModalHandler();\n        }, 1000);\n      }\n\n      if (rawResponse.status === 400) {\n        alert(\"Bad Request\");\n      }\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  useEffect(() => {\n    getAvailableSlots(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"bookingModal\",\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        className: \"cardHeader\",\n        title: \"Book an Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: bookAppointmentHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              id: \"standard-disabled\",\n              label: \"DoctorName\",\n              required: true,\n              value: doctorName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n              utils: DateFnsUtils,\n              children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                disableToolbar: true,\n                variant: \"inline\",\n                format: \"MM/dd/yyyy\",\n                margin: \"normal\",\n                id: \"date-picker-inline\",\n                label: \"Date picker inline\",\n                value: selectedDate,\n                onChange: handleDateChange,\n                KeyboardButtonProps: {\n                  \"aria-label\": \"change date\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"timeSlotInput\",\n                children: \"Time Slot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"timeSlotInput\",\n                id: \"timeSlotInput\",\n                value: selectedSlot,\n                onChange: handleSlotChange,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"None\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 19\n                }, this), availableSlots.map((slot, key) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: slot,\n                  children: slot\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: slotRequiredClass,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Select a time slot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-multiline-static\",\n                label: \"Medical History\",\n                multiline: true,\n                rows: 4,\n                value: medicalHistory,\n                onChange: e => setMedicalHistory(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-multiline-static\",\n                label: \"Symptoms\",\n                multiline: true,\n                rows: 4,\n                value: symptoms,\n                placeholder: \"ex.Cold, Swelling, etc\",\n                onChange: e => setSymptoms(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), bookedSuccessfully === true && /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Appointment booked successfully.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"bookappointment\",\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointment, \"P9xCqBvVZbwwaL1Sr5NtTynsvo8=\");\n\n_c = BookAppointment;\nexport default BookAppointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"sources":["C:/Users/Shiva/Downloads/BookMyConsultationUIF/BookMyConsultationUI/src/screens/doctorList/BookAppointment.js"],"names":["React","useState","useEffect","Paper","CardHeader","CardContent","TextField","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","BookAppointment","baseUrl","doctor","getUserAppointments","userAppointments","closeModalHandler","doctorName","firstName","lastName","dateFormatter","date","dateArray","toLocaleDateString","split","newDate","currentUserAppoinments","selectedDate","setSelectedDate","Date","selectedSlot","setSelectedSlot","availableSlots","setAvailableSlots","medicalHistory","setMedicalHistory","symptoms","setSymptoms","slotRequiredClass","setSlotRequiredClass","bookedSuccessfully","setBookedSuccessfully","handleDateChange","handleSlotChange","e","target","value","getAvailableSlots","url","id","rawResponse","fetch","ok","response","json","timeSlot","error","Error","message","alert","bookAppointmentHandler","preventDefault","emailId","JSON","parse","sessionStorage","getItem","userDetails","accessToken","existingBooking","filter","appt","appointmentDate","length","data","doctorId","userId","userName","createdDate","priorMedicalHistory","method","headers","Accept","Authorization","body","stringify","setTimeout","status","map","slot","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Paper,\r\n  CardHeader,\r\n  CardContent,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n\r\nconst BookAppointment = ({\r\n  baseUrl,\r\n  doctor,\r\n  getUserAppointments,\r\n  userAppointments,\r\n  closeModalHandler,\r\n}) => {\r\n  let doctorName = `${doctor.firstName} ${doctor.lastName}`;\r\n  const dateFormatter = (date) => {\r\n    let dateArray = date.toLocaleDateString().split(\"/\");\r\n    let newDate = `${dateArray[2]}-${dateArray[0]}-${dateArray[1]}`;\r\n    return newDate;\r\n  };\r\n  const currentUserAppoinments = userAppointments;\r\n  const [selectedDate, setSelectedDate] = useState(dateFormatter(new Date()));\r\n  const [selectedSlot, setSelectedSlot] = useState(\"\");\r\n  const [availableSlots, setAvailableSlots] = useState([\"None\"]);\r\n  const [medicalHistory, setMedicalHistory] = useState(\"\");\r\n  const [symptoms, setSymptoms] = useState(\"\");\r\n  const [slotRequiredClass, setSlotRequiredClass] = useState(\"none\");\r\n  const [bookedSuccessfully, setBookedSuccessfully] = useState(false);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(dateFormatter(date));\r\n  };\r\n\r\n  const handleSlotChange = (e) => {\r\n    setSelectedSlot(e.target.value);\r\n    setSlotRequiredClass(\"none\");\r\n  };\r\n\r\n  const getAvailableSlots = async () => {\r\n    const url = `${baseUrl}doctors/${doctor.id}/timeSlots?date=${selectedDate}`;\r\n\r\n    try {\r\n      const rawResponse = await fetch(url);\r\n\r\n      if (rawResponse.ok) {\r\n        const response = await rawResponse.json();\r\n        setAvailableSlots(response.timeSlot);\r\n      } else {\r\n        const error = new Error();\r\n        error.message = \"Some Error Occurred\";\r\n        throw error;\r\n      }\r\n    } catch (e) {\r\n      alert(e.message);\r\n    }\r\n  };\r\n\r\n  const bookAppointmentHandler = async (e) => {\r\n    if (e) e.preventDefault();\r\n\r\n    // Validation\r\n    if (\r\n      selectedSlot === \"None\" ||\r\n      selectedSlot === null ||\r\n      selectedSlot === \"\"\r\n    ) {\r\n      setSlotRequiredClass(\"block\");\r\n      return;\r\n    }\r\n    const emailId = JSON.parse(sessionStorage.getItem(\"userId\"));\r\n    const userDetails = JSON.parse(sessionStorage.getItem(\"user-details\"));\r\n    const accessToken = sessionStorage.getItem(\"accessToken\");\r\n    // Allow only logged in user to Book appointment\r\n    if (emailId == null || userDetails == null || accessToken == null) {\r\n      alert(\"Please Login to Book an appointment\");\r\n      closeModalHandler();\r\n      return;\r\n    }\r\n\r\n    // Check if user already has appointment for the same date-time\r\n    const existingBooking = currentUserAppoinments.filter((appt) => {\r\n      if (\r\n        appt.appointmentDate === selectedDate &&\r\n        appt.timeSlot === selectedSlot\r\n      ) {\r\n        return appt;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    if (existingBooking.length > 0) {\r\n      alert(\"Either the slot is already booked or not available\");\r\n      return;\r\n    }\r\n\r\n    let data = {\r\n      doctorId: doctor.id,\r\n      doctorName: doctorName,\r\n      userId: emailId,\r\n      userName: `${userDetails.firstName} ${userDetails.lastName}`,\r\n      timeSlot: selectedSlot,\r\n      createdDate: dateFormatter(new Date()),\r\n      appointmentDate: selectedDate,\r\n      symptoms: symptoms,\r\n      priorMedicalHistory: medicalHistory,\r\n    };\r\n\r\n    const url = baseUrl + \"appointments\";\r\n    try {\r\n      const rawResponse = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json;charset=UTF-8\",\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (rawResponse.ok) {\r\n        setBookedSuccessfully(true);\r\n        getUserAppointments();\r\n        setTimeout(function () {\r\n          closeModalHandler();\r\n        }, 1000);\r\n      }\r\n      if (rawResponse.status === 400) {\r\n        alert(\"Bad Request\");\r\n      }\r\n    } catch (e) {\r\n      alert(e.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAvailableSlots();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedDate]);\r\n\r\n  return (\r\n    <div>\r\n      <Paper className=\"bookingModal\">\r\n        <CardHeader className=\"cardHeader\" title=\"Book an Appointment\" />\r\n        <CardContent key={doctor.id}>\r\n          <form noValidate autoComplete=\"off\" onSubmit={bookAppointmentHandler}>\r\n            <div>\r\n              <TextField\r\n                disabled\r\n                id=\"standard-disabled\"\r\n                label=\"DoctorName\"\r\n                required\r\n                value={doctorName}\r\n              />\r\n            </div>\r\n            <div>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  disableToolbar\r\n                  variant=\"inline\"\r\n                  format=\"MM/dd/yyyy\"\r\n                  margin=\"normal\"\r\n                  id=\"date-picker-inline\"\r\n                  label=\"Date picker inline\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </div>\r\n            <div>\r\n              <FormControl>\r\n                <InputLabel id=\"timeSlotInput\">Time Slot</InputLabel>\r\n                <Select\r\n                  labelId=\"timeSlotInput\"\r\n                  id=\"timeSlotInput\"\r\n                  value={selectedSlot}\r\n                  onChange={handleSlotChange}\r\n                >\r\n                  <MenuItem value=\"None\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {availableSlots.map((slot, key) => (\r\n                    <MenuItem key={key} value={slot}>\r\n                      {slot}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText className={slotRequiredClass}>\r\n                  <span className=\"red\">Select a time slot</span>\r\n                </FormHelperText>\r\n              </FormControl>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <FormControl>\r\n                <TextField\r\n                  id=\"standard-multiline-static\"\r\n                  label=\"Medical History\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={medicalHistory}\r\n                  onChange={(e) => setMedicalHistory(e.target.value)}\r\n                />\r\n              </FormControl>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <FormControl>\r\n                <TextField\r\n                  id=\"standard-multiline-static\"\r\n                  label=\"Symptoms\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={symptoms}\r\n                  placeholder=\"ex.Cold, Swelling, etc\"\r\n                  onChange={(e) => setSymptoms(e.target.value)}\r\n                />\r\n              </FormControl>\r\n            </div>\r\n            <br />\r\n            {bookedSuccessfully === true && (\r\n              <FormControl>\r\n                <span>Appointment booked successfully.</span>\r\n              </FormControl>\r\n            )}\r\n            <br />\r\n            <br />\r\n            <Button\r\n              id=\"bookappointment\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Book Appointment\r\n            </Button>\r\n          </form>\r\n        </CardContent>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookAppointment;"]},"metadata":{},"sourceType":"module"}